// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

/*
Package registry is a generated protocol buffer package.

It is generated from these files:
	registry.proto

It has these top-level messages:
	Confirmation
	Lease
	Service
	Services
	Endpoint
	EmptyParam
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Confirmation struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Confirmation) Reset()                    { *m = Confirmation{} }
func (m *Confirmation) String() string            { return proto.CompactTextString(m) }
func (*Confirmation) ProtoMessage()               {}
func (*Confirmation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Confirmation) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Lease struct {
	Id              string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CheckInInterval uint32 `protobuf:"varint,2,opt,name=CheckInInterval" json:"CheckInInterval,omitempty"`
}

func (m *Lease) Reset()                    { *m = Lease{} }
func (m *Lease) String() string            { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()               {}
func (*Lease) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Lease) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Lease) GetCheckInInterval() uint32 {
	if m != nil {
		return m.CheckInInterval
	}
	return 0
}

type Service struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint *Endpoint `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type Services struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *Services) Reset()                    { *m = Services{} }
func (m *Services) String() string            { return proto.CompactTextString(m) }
func (*Services) ProtoMessage()               {}
func (*Services) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Services) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Endpoint struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Endpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type EmptyParam struct {
}

func (m *EmptyParam) Reset()                    { *m = EmptyParam{} }
func (m *EmptyParam) String() string            { return proto.CompactTextString(m) }
func (*EmptyParam) ProtoMessage()               {}
func (*EmptyParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Confirmation)(nil), "registry.Confirmation")
	proto.RegisterType((*Lease)(nil), "registry.Lease")
	proto.RegisterType((*Service)(nil), "registry.Service")
	proto.RegisterType((*Services)(nil), "registry.Services")
	proto.RegisterType((*Endpoint)(nil), "registry.Endpoint")
	proto.RegisterType((*EmptyParam)(nil), "registry.EmptyParam")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registry service

type RegistryClient interface {
	Register(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Lease, error)
	Unregister(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Confirmation, error)
	GetAllServices(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*Services, error)
	CheckIn(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Confirmation, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Register(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := grpc.Invoke(ctx, "/registry.Registry/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Unregister(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/registry.Registry/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetAllServices(ctx context.Context, in *EmptyParam, opts ...grpc.CallOption) (*Services, error) {
	out := new(Services)
	err := grpc.Invoke(ctx, "/registry.Registry/GetAllServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CheckIn(ctx context.Context, in *Lease, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/registry.Registry/CheckIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registry service

type RegistryServer interface {
	Register(context.Context, *Endpoint) (*Lease, error)
	Unregister(context.Context, *Lease) (*Confirmation, error)
	GetAllServices(context.Context, *EmptyParam) (*Services, error)
	CheckIn(context.Context, *Lease) (*Confirmation, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Register(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Unregister(ctx, req.(*Lease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetAllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetAllServices(ctx, req.(*EmptyParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/CheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CheckIn(ctx, req.(*Lease))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registry_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Registry_Unregister_Handler,
		},
		{
			MethodName: "GetAllServices",
			Handler:    _Registry_GetAllServices_Handler,
		},
		{
			MethodName: "CheckIn",
			Handler:    _Registry_CheckIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x5d, 0xab, 0x73, 0xf1, 0x6e, 0x6e, 0x78, 0x11, 0x29, 0x7b, 0x90, 0x91, 0xa7, 0xbe, 0x38,
	0x70, 0x0a, 0x2a, 0xf8, 0x32, 0xc6, 0x90, 0x82, 0x0f, 0x12, 0xf1, 0x03, 0xe2, 0x1a, 0x35, 0xb4,
	0x4d, 0x4a, 0x12, 0x06, 0xfb, 0x65, 0xbf, 0x42, 0xac, 0x69, 0x3b, 0x36, 0x5f, 0x7c, 0xbb, 0xb9,
	0xf7, 0xdc, 0x73, 0x0e, 0xe7, 0x06, 0x86, 0x46, 0x7c, 0x48, 0xeb, 0xcc, 0x66, 0x5a, 0x1a, 0xed,
	0x34, 0x92, 0xfa, 0x4d, 0x2f, 0x60, 0xb0, 0xd0, 0xea, 0x5d, 0x9a, 0x82, 0x3b, 0xa9, 0x15, 0x0e,
	0x21, 0xd4, 0x59, 0x14, 0x4c, 0x82, 0x98, 0xb0, 0x50, 0x67, 0x74, 0x0e, 0xdd, 0x27, 0xc1, 0xad,
	0xf8, 0x19, 0xc8, 0xb4, 0x1a, 0x1c, 0xb3, 0x50, 0xa6, 0x18, 0xc3, 0x68, 0xf1, 0x29, 0x56, 0x59,
	0xa2, 0x12, 0xe5, 0x84, 0x59, 0xf3, 0x3c, 0x0a, 0x27, 0x41, 0x7c, 0xc2, 0x76, 0xdb, 0x34, 0x81,
	0xde, 0x8b, 0x30, 0x6b, 0xb9, 0xda, 0x27, 0x99, 0x02, 0x11, 0x2a, 0x2d, 0xb5, 0x54, 0xae, 0xda,
	0xee, 0xcf, 0x70, 0xda, 0x58, 0x5d, 0xfa, 0x09, 0x6b, 0x30, 0xf4, 0x1e, 0x88, 0xa7, 0xb2, 0x78,
	0x09, 0xc4, 0xfa, 0x3a, 0x0a, 0x26, 0x07, 0x71, 0x7f, 0x76, 0xda, 0xee, 0x7a, 0x14, 0x6b, 0x20,
	0xf4, 0x0e, 0x48, 0x4d, 0x88, 0x11, 0xf4, 0x78, 0x9a, 0x1a, 0x61, 0xad, 0xf7, 0x52, 0x3f, 0x11,
	0xe1, 0xb0, 0xd4, 0xe6, 0xd7, 0x4c, 0x97, 0x55, 0x35, 0x1d, 0x00, 0x2c, 0x8b, 0xd2, 0x6d, 0x9e,
	0xb9, 0xe1, 0xc5, 0xec, 0x2b, 0x00, 0xc2, 0xbc, 0x0c, 0x5e, 0xd5, 0xb5, 0x30, 0xf8, 0x87, 0xf3,
	0xf1, 0xa8, 0xed, 0x55, 0x29, 0xd2, 0x0e, 0xde, 0x02, 0xbc, 0x2a, 0x53, 0x2f, 0xed, 0x02, 0xc6,
	0xe7, 0x6d, 0x63, 0xfb, 0x2e, 0xb4, 0x83, 0x0f, 0x30, 0x7c, 0x14, 0x6e, 0x9e, 0xe7, 0x4d, 0x02,
	0x67, 0x5b, 0x8a, 0x8d, 0xc1, 0x31, 0xee, 0xa5, 0x60, 0x69, 0x07, 0x6f, 0xa0, 0xe7, 0xef, 0xf2,
	0x0f, 0xcd, 0xb7, 0xa3, 0xea, 0xbb, 0x5c, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xfb, 0x33,
	0x03, 0x40, 0x02, 0x00, 0x00,
}
